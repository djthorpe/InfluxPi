/*
	InfluxDB client
	(c) Copyright David Thorpe 2017
	All Rights Reserved

	For Licensing and Usage information, please see LICENSE file
*/

package influxdb

import (
	"encoding/json"
	"fmt"
	"strconv"
	"time"
)

////////////////////////////////////////////////////////////////////////////////
// TYPES

// RetentionPolicy defines a period of time to store measurement data for
type RetentionPolicy struct {
	Duration           time.Duration
	ShardGroupDuration time.Duration
	ReplicationFactor  int
	Default            bool
}

////////////////////////////////////////////////////////////////////////////////
// PUBLIC METHODS

// GetRetentionPolicies enumerates the retention policies for a database
func (this *Client) GetRetentionPolicies() (map[string]*RetentionPolicy, error) {
	if this.client == nil {
		return nil, ErrNotConnected
	}
	response, err := this.Query("SHOW RETENTION POLICIES")
	if err != nil {
		return nil, err
	}
	// check for case where there are no retention policies (there should
	// always be the "autogen" policy?)
	if response.Length() == 0 {
		return nil, ErrEmptyResponse
	}
	// Now iterate through the retention policies
	policies := make(map[string]*RetentionPolicy, response.Length())
	for i := range response.Values {
		var ok bool
		var name string
		hash := response.Row(i)
		policy := new(RetentionPolicy)

		if name, ok = hash["name"].(string); ok == false {
			this.log.Debug("Invalid name parameter")
			return nil, ErrUnexpectedResponse
		}
		if policy.Default, ok = hash["default"].(bool); ok == false {
			this.log.Debug("Invalid default parameter")
			return nil, ErrUnexpectedResponse
		}
		if replicationFactor, ok := hash["replicaN"].(json.Number); ok == false {
			this.log.Debug("Invalid replicaN parameter, %T", hash["replicaN"])
			return nil, ErrUnexpectedResponse
		} else if policy.ReplicationFactor, ok = parseInt(string(replicationFactor)); ok == false {
			this.log.Debug("Invalid replicaN parameter, %v", replicationFactor)
			return nil, ErrUnexpectedResponse
		}
		if duration, ok := hash["duration"].(string); ok == false {
			this.log.Debug("Invalid duration parameter, %T", hash["duration"])
			return nil, ErrUnexpectedResponse
		} else if policy.Duration, ok = parseDuration(duration); ok == false {
			this.log.Debug("Invalid duration parameter, %v", duration)
			return nil, ErrUnexpectedResponse
		}
		if shardGroupDuration, ok := hash["shardGroupDuration"].(string); ok == false {
			this.log.Debug("Invalid shardGroupDuration parameter, %T", hash["shardGroupDuration"])
			return nil, ErrUnexpectedResponse
		} else if policy.ShardGroupDuration, ok = parseDuration(shardGroupDuration); ok == false {
			this.log.Debug("Invalid shardGroupDuration parameter, %v", shardGroupDuration)
			return nil, ErrUnexpectedResponse
		}

		policies[name] = policy
	}
	return policies, nil
}

// RetentionPolicyExists returns true if a retention policy exists or
// it will return false
func (this *Client) RetentionPolicyExists(name string) bool {
	if this.client == nil {
		return false
	}
	// Execute query
	response, err := this.Query("SHOW RETENTION POLICIES")
	if err != nil || response.Length() == 0 {
		return false
	}
	// Now iterate through the retention policies
	for i := range response.Values {
		hash := response.Row(i)
		if policy, ok := hash["name"].(string); ok == false {
			return false
		} else if policy == name {
			return true
		}
	}
	// No policy found
	return false
}

// DropRetentionPolicy deletes a retention policy. It will not
// currently return an error if the retention policy does not
// already exist
func (this *Client) DropRetentionPolicy(name, database string) error {
	if this.client == nil {
		return ErrNotConnected
	}
	if database == "" {
		database = this.database
	}
	q := "DROP RETENTION POLICY " + QuoteIdentifier(name)
	if database != "" {
		q = q + " ON " + QuoteIdentifier(database)
	}
	if _, err := this.query(q); err != nil {
		return err
	}
	return nil
}

// CreateRetentionPolicy creates a retention policy
func (this *Client) CreateRetentionPolicy(name string, policy *RetentionPolicy) error {
	if this.client == nil {
		return ErrNotConnected
	}
	if policy == nil {
		return fmt.Errorf("Expected policy parameter in call to CreateRetentionPolicy")
	}
	if exists := this.RetentionPolicyExists(name); exists {
		return ErrAlreadyExists
	}
	q := "CREATE RETENTION POLICY " + QuoteIdentifier(name)
	if this.database != "" {
		q = q + " ON " + QuoteIdentifier(this.database)
	}
	q = q + " DURATION " + fmt.Sprintf("%v", policy.Duration)
	q = q + " REPLICATION " + fmt.Sprintf("%v", policy.ReplicationFactor)
	if policy.ShardGroupDuration != 0 {
		q = q + " SHARD DURATION " + fmt.Sprintf("%v", policy.ShardGroupDuration)
	}
	if policy.Default {
		q = q + " DEFAULT"
	}
	if _, err := this.query(q); err != nil {
		return err
	}
	return nil
}

func (this *Client) SetRetentionPolicyDefault(name string) error {
	if this.client == nil {
		return ErrNotConnected
	}
	q := "ALTER RETENTION POLICY " + QuoteIdentifier(name)
	if this.database != "" {
		q = q + " ON " + QuoteIdentifier(this.database)
	}
	q = q + " DEFAULT"
	if _, err := this.query(q); err != nil {
		return err
	}
	return nil
}

func (this *Client) SetRetentionPolicyDuration(name string, duration time.Duration) error {
	if this.client == nil {
		return ErrNotConnected
	}
	q := "ALTER RETENTION POLICY " + QuoteIdentifier(name)
	if this.database != "" {
		q = q + " ON " + QuoteIdentifier(this.database)
	}
	q = q + " DURATION " + fmt.Sprintf("%v", duration)
	if _, err := this.query(q); err != nil {
		return err
	}
	return nil
}

func (this *Client) SetRetentionPolicyReplicationFactor(name string, replicationFactor int) error {
	if this.client == nil {
		return ErrNotConnected
	}
	q := "ALTER RETENTION POLICY " + QuoteIdentifier(name)
	if this.database != "" {
		q = q + " ON " + QuoteIdentifier(this.database)
	}
	q = q + " REPLICATION " + fmt.Sprintf("%v", replicationFactor)
	if _, err := this.query(q); err != nil {
		return err
	}
	return nil
}

////////////////////////////////////////////////////////////////////////////////
// STRINGIFY


////////////////////////////////////////////////////////////////////////////////
// PRIVATE METHODS

func parseInt(value string) (int, bool) {
	if int64Value, err := strconv.ParseInt(value, 10, 64); err != nil {
		return 0, false
	} else {
		return int(int64Value), true
	}
}

func parseDuration(value string) (time.Duration, bool) {
	if duration, err := time.ParseDuration(value); err != nil {
		return 0, false
	} else {
		return duration, true
	}
}
